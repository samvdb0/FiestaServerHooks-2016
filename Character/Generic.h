#pragma once

#include "sqlext.h"

struct CSendPacket;



struct ItemDBContainer
{
};

union NETCOMMAND
{
	unsigned __int16 protocol;
	struct
	{
		unsigned __int16 command : 10;
		unsigned __int16 department : 6;
	} str;
};

struct NETPACKET
{
	NETCOMMAND netcmd;
	char data[];
};

#pragma pack(push, 1)
union Name3
{
	char n3_name[12];
	unsigned int n3_code[3];
};

struct INDUN_MAP_INFO
{
	char mapIdClient[12];
	BYTE modeIdLv;
};

struct PROTO_NC_INSTANCE_DUNGEON_RANK_REQ
{
	ushort mapCount;
	INDUN_MAP_INFO maps[];
};
#pragma pack(pop)

/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'Character_Release'
*/

struct NETPACKET;
struct CSessionWorkerManager;
struct CSessionWorker;

/* 151 */
struct CSocket_Session
{
    char _size[220];
};

/* 17 */
typedef unsigned __int16 WORD;


/* 121 */
struct $6B39594BD70E34B9CFA5236311C61DF6
{
    unsigned __int16 command : 10;
    unsigned __int16 department : 6;
};
/* 143 */
enum PACKET_WORKTYPE
{
    PACKET_PARSING_NONE = 0x0,
    PACKET_PARSING_WORKING = 0x1,
    PACKET_PARSING_DONE = 0x2,
    PACKET_PARSING_FAILED = 0x3,
};

/* 153 */
struct CPacket_Parser_Interface
{
    void* vfptr;
};

struct CIOCP_Process_Interfece
{
    void* vfptr;
};

struct CIOCP_Process
{
    CIOCP_Process_Interfece* m_pProcess;
    CIOCP_Process_Interfece m_DefautProcess;
};

struct CIOCP
{
    enum IOCP_WORK_TYPE
    {
        READ = 0x0,
        WRITE = 0x1,
        CLOSE = 0x2,
        STOP = 0x3,
    };

    struct IOCP_OVERLAPPED : _OVERLAPPED
    {
        CIOCP::IOCP_WORK_TYPE Type;
        CIOCP_Process* pIOCP_Process;
        void* pData;
    };
};


struct CSession : CSocket_Session
{
    HOOK_PUB_M int Send(CSendPacket* pPacket)
    {
        return CallMemberFunction<CSession, int, CSendPacket*>(0x0043D5F0, this, pPacket);
    }
	
    char m_Connection;
    int m_Connected_Server_ID;
    int m_Connected_World;
    int m_Connected_Zone;
    _SYSTEMTIME m_Connected_Time;
    unsigned int m_LastReceiveTime;
    unsigned int m_LastSendTime;
    NETCOMMAND m_Last_PacketCommand;
    int m_Last_PacketLength;
    PACKET_WORKTYPE m_Last_PacketWorkType;
    unsigned int m_LastHeartBeatSendTime;
    _RTL_CRITICAL_SECTION m_Send_CS;
    CIOCP_Process m_Close_IOCP_Process;
    CIOCP::IOCP_OVERLAPPED m_Overlapped_Close;
};
/* 132 */
struct CPFs
{
    CSessionWorker* m_pSessionWorker;
    CSession* m_pSession;
};

typedef void* NETPACKET_HANDLER;
//typedef int(CPFsCharacter::* NETPACKET_HANDLER) (NETPACKET* netpacket, int len);
struct PROTOCOLFUNCTIONTEMPLETE
{
    HOOK_PUB_M bool Store(int header, int type, NETPACKET_HANDLER pnt)
    {
        return CallMemberFunction<PROTOCOLFUNCTIONTEMPLETE, bool, int, int, NETPACKET_HANDLER>(0x00431160, this, header, type, pnt);
    }

    char _size[0x1108];
};

/* 160 */
struct CParser : CPacket_Parser_Interface
{
  CPFs m_PFs;
  PROTOCOLFUNCTIONTEMPLETE m_PFT;
};

/* 163 */
struct Database
{
    void* vfptr;
    bool m_bTran;
    char _pad[0x3];
    void* handleDBC;
};

/* 164 */
struct DBRecord : Database
{
    void* handleStatement;
    int columnNo;
};

/* 162 */
struct CGameDB_Connect
{
    DBRecord m_DB;

    SQLHSTMT GetStatement()
    {
        return m_DB.handleStatement;
    }

    BOOL FetchResult()
    {
        m_DB.columnNo = 0;
        int v2 = SQLFetch(m_DB.handleStatement);
        return !v2 || v2 == 1;
    }

    CGameDB_Connect* GetByte(SQLPOINTER TargetValue)
    {
        ++m_DB.columnNo;
        SQLGetData(m_DB.handleStatement, m_DB.columnNo, SQL_C_TINYINT, TargetValue, 1, nullptr);
        return this;
    }

    CGameDB_Connect* GetUInt32(SQLPOINTER TargetValue)
    {
        ++m_DB.columnNo;
        SQLGetData(m_DB.handleStatement, m_DB.columnNo, SQL_C_ULONG, TargetValue, 4, nullptr);
        return this;
    }

    CGameDB_Connect* GetUInt64(SQLPOINTER TargetValue)
    {
        ++m_DB.columnNo;
        SQLGetData(m_DB.handleStatement, m_DB.columnNo, SQL_C_ULONG, TargetValue, 8, nullptr);
        return this;
    }

    CGameDB_Connect* GetDate(SQLPOINTER TargetValue)
    {
        ++m_DB.columnNo;
        SQLGetData(m_DB.handleStatement, m_DB.columnNo, SQL_C_TIMESTAMP, TargetValue, sizeof TIMESTAMP_STRUCT, nullptr);
        return this;
    }

    CGameDB_Connect* GetString(SQLPOINTER TargetValue, int length)
    {
        ++m_DB.columnNo;
        SQLGetData(m_DB.handleStatement, m_DB.columnNo, SQL_C_CHAR, TargetValue, length, nullptr);
        return this;
    }

    SQLRETURN CloseCursor()
    {
        return SQLCloseCursor(m_DB.handleStatement);
    }
};

/* 124 */
struct CSQLPCharacter
{
};

/* 125 */
struct CSQLPItem
{
};

/* 170 */
struct CSQLPSkill
{
};

/* 172 */
struct CSQLPQuest
{
};

/* 167 */
struct CSQLPKingdomQuest
{
};

/* 166 */
struct CSQLPFriend
{
};

/* 173 */
struct CSQLPMasPup
{
};

/* 175 */
struct CSQLPGuild
{
};

/* 168 */
struct CSQLPPrison
{
};

/* 177 */
struct CSQLPHolyPromise
{
};

/* 126 */
struct CSQLPPet
{
};

/* 128 */
struct CGameDB_Item
{
    struct __declspec(align(8)) DB_ITEM_DATA
    {
        unsigned __int64 nItemKey;
        unsigned __int16 nStorage;
        char nStorageType;
        char _pad;
        unsigned int nItemID;
        unsigned int nFlags;
        TIMESTAMP_STRUCT dDate;
        char _pad2[0x4];
    };
	
    struct DB_ITEM_ARRAY_CHAR
    {
        int NumOfItem;
        char _pad[0x4];
        DB_ITEM_DATA Array[192];
    };

    CSQLPCharacter* m_pSQLPCharacter;
    CSQLPItem* m_pSQLPItem;
    CSQLPPet* m_pSQLPPet;
};

/* 169 */
struct CGameDB_Skill
{
    CSQLPSkill* m_pSQLPSkill;
};

/* 171 */
struct CGameDB_Quest
{
    CSQLPQuest* m_pSQLPQuest;
};

/* 180 */
struct CGameDB_KingdomQuest
{
    CSQLPKingdomQuest* m_pSQLPKingdomQuest;
};

/* 165 */
struct CGameDB_Friend
{
    CSQLPFriend* m_pSQLPFriend;
};

/* 174 */
struct CGameDB_MasPup
{
    CSQLPMasPup* m_pSQLPMasPup;
};

/* 176 */
struct CGameDB_Guild
{
    CSQLPGuild* m_pSQLPGuild;
};

/* 178 */
struct CGameDB_HolyPromise
{
    CSQLPHolyPromise* m_pSQLPHolyPromise;
};

/* 127 */
struct CGameDB_Pet
{
    CSQLPPet* m_pSQLPPet;
};

/* 181 */
struct CSQLPEventFriend
{
};

/* 182 */
struct CSQLPEventWorldCup
{
};

/* 183 */
struct CSQLPUserConnection
{
};

/* 184 */
struct CSQLPAuction
{
};

/* 185 */
struct CSQLPGambleHouse
{
};

/* 186 */
struct CSQLPCollection
{
};

/* 179 */
struct CGameDB_Character : CGameDB_Connect
{	
    CSQLPCharacter m_SQLPCharacter;
    CSQLPItem m_SQLPItem;
    CSQLPSkill m_SQLPSkill;
    CSQLPQuest m_SQLPQuest;
    CSQLPKingdomQuest m_SQLPKingdomQuest;
    CSQLPFriend m_SQLPFriend;
    CSQLPMasPup m_SQLPMasPup;
    CSQLPGuild m_SQLPGuild;
    CSQLPPrison m_SQLPPrison;
    CSQLPHolyPromise m_SQLPHolyPromise;
    CSQLPPet m_SQLPPet;
    CGameDB_Item m_Item;
    CGameDB_Skill m_Skill;
    CGameDB_Quest m_Quest;
    CGameDB_KingdomQuest m_KingdomQuest;
    CGameDB_Friend m_Friend;
    CGameDB_MasPup m_MasPup;
    CGameDB_Guild m_Guild;
    CGameDB_HolyPromise m_HolyPromise;
    CGameDB_Pet m_Pet;
    CSQLPEventFriend m_SQLPEventFriend;
    CSQLPEventWorldCup m_SQLPEventWorldCup;
    CSQLPUserConnection m_SQLPUserConnection;
    CSQLPAuction m_SQLPAuction;
    CSQLPGambleHouse m_SQLPGambleHouse;
    CSQLPCollection m_SQLPCollection;
};

struct __declspec(align(1)) SHINE_INDUN_INFO
{
    char MapIDClient[12];
    char ModeIDLv;
};
struct SHINE_INDUN_RANK_CLIENT_VALUE
{
    char nCharID[20];
    char nCharClass;
    char _pad[0x3];
    unsigned __int64 nValue;
};

struct TEMP_SHAPE
{
    char Race;
    char Class;
    char Gender;
};


struct PROTO_AVATAR_SHAPE_INFO
{
    __int8 race : 2;
    __int8 chrclass : 5;
    __int8 gender : 1;
    __int8 hairtype : 8;
    __int8 haircolor : 8;
    __int8 faceshape : 8;
};

struct INDUN_CHAR_SHAPE
{
    char RCG;
    char HairType;
    char HairColor;
    char FaceShape;
};

struct __declspec(align(1)) PROTO_NC_INSTANCE_DUNGEON_RANK_ACK
{
    SHINE_INDUN_INFO sIndunInfo; // 13
    INDUN_CHAR_SHAPE damageDealtShapeInfo1st; // 4
    INDUN_CHAR_SHAPE damageDealtShapeInfo2nd; // 4
    INDUN_CHAR_SHAPE damageDealtShapeInfo3th; // 4
    INDUN_CHAR_SHAPE damageTakenShapeInfo1st; // 4
    INDUN_CHAR_SHAPE damageTakenShapeInfo2nd; // 4
    INDUN_CHAR_SHAPE damageTakenShapeInfo3th; // 4
    INDUN_CHAR_SHAPE healingDoneShapeInfo1st; // 4
    INDUN_CHAR_SHAPE healingDoneShapeInfo2nd; // 4
    INDUN_CHAR_SHAPE healingDoneShapeInfo3th; // 4
    char nDamageDealtCount;
    char nDamageTakenCount;
    char nHealingDoneCount;
    SHINE_INDUN_RANK_CLIENT_VALUE damageDealtRanks[20];
    SHINE_INDUN_RANK_CLIENT_VALUE damageTakenRanks[20];
    SHINE_INDUN_RANK_CLIENT_VALUE healingDoneRanks[20];
};

#pragma pack(push, 1)
struct SHINE_INDUN_RANK
{
    unsigned int nCharRegNum;
    unsigned int nCharHandle;
    unsigned __int64 nDamageDealt;
    unsigned __int64 nDamageTaken;
    unsigned __int64 nHealingDone;
};

struct __declspec(align(1)) PROTO_NC_INSTANCE_DUNGEON_RANK_SAVE_WORLD_CMD
{
    SHINE_INDUN_INFO sIndunInfo;
    unsigned int nPlayTime;
    unsigned __int16 nRankCount; // 19
    SHINE_INDUN_RANK ranks[]; // + 32 * nRankCount
};

struct PROTO_NC_CHAR_CHARDATA_REQ
{
    unsigned __int16 ClientHandle;
    unsigned int CharNo;
};

struct SHINE_INDUN_RANK_MYRANK
{
    SHINE_INDUN_INFO sIndunInfo;
    char _pad[0x3];
    unsigned __int64 nLastDamageDealt;
    unsigned __int64 nLastDamageTaken;
    unsigned __int64 nLastHealingDone;
    unsigned int nLastPlayTime;
    unsigned int nLastPlayDate;
    unsigned __int64 nBestDamageDealt;
    unsigned __int64 nBestDamageTaken;
    unsigned __int64 nBestHealingDone;
    unsigned int nBestPlayTime;
    unsigned int nBestPlayDate;
    unsigned int nBestDamageDealtRank;
    unsigned int nBestDamageTakenRank;
    unsigned int nBestHealingDoneRank;
};

struct PROTO_NC_INSTANCE_DUNGEON_RANK_MYRANK_CMD
{
    unsigned int nCharRegNum;
    unsigned __int16 nMyRankCount;
    SHINE_INDUN_RANK_MYRANK MyRank[100];
};

struct SHINE_INDUN_RANK_RANKING
{
    unsigned __int16 clienthandle;
    unsigned int nDamageDealtRank;
    unsigned int nDamageTakenRank;
    unsigned int nHealingDoneRank;
};

struct NETPACKETZONEHEADER
{
    unsigned __int16 clienthandle;
    unsigned int charregistnumber;
};

struct PROTO_NC_INSTANCE_DUNGEON_RANK_UPDATE_DB_REQ
{
    SHINE_INDUN_INFO sIndunInfo;
    unsigned __int16 CharListCount;
    NETPACKETZONEHEADER CharList[];
};

struct PROTO_NC_INSTANCE_DUNGEON_RANK_UPDATE_DB_ACK
{
    SHINE_INDUN_INFO sIndunInfo;
    unsigned __int16 CharListCount;
    SHINE_INDUN_RANK_RANKING CharList[1000];
};

#pragma pack(pop)

struct CSendPacket
{
	// 0x0044F880
    CSendPacket()
    {
        m_Packet.Size.type1.size = 2;
        m_Packet.ID = 0;
        m_DataSize = 0;
    }

	CSendPacket* ID(ushort protocol, size_t size, void* data)
    {
        return CallMemberFunction<CSendPacket, CSendPacket*, ushort, size_t, void*>(0x0044FA10, this, protocol, size, data);
    }
	
    struct __declspec(align(1)) PACKET_SIZE1
    {
      unsigned __int16 dummy;
      char size;
    };
	
    struct __declspec(align(1)) PACKET_SIZE2
    {
      char sizezero;
      unsigned __int16 size;
    };

    union PACKET_SIZE
    {
        PACKET_SIZE1 type1;
        PACKET_SIZE2 type2;
    };

    struct PACKET
    {
        PACKET_SIZE Size;
        __declspec(align(1)) unsigned __int16 ID;
        char Data[8187];
    };

    PACKET m_Packet;
    unsigned int m_DataSize;
};